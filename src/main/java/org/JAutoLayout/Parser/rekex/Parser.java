
// !! this file is automatically generated; do not modify.

package org.JAutoLayout.Parser.rekex;

import org.rekex.parser.PegParser;
import org.rekex.parser.ParseResult;

import java.util.List;
import org.JAutoLayout.Parser.rekex.Grammar.CommaPredicate;
import org.JAutoLayout.Parser.rekex.Grammar.Connection;
import org.JAutoLayout.Parser.rekex.Grammar.ConnectionSuperView;
import org.JAutoLayout.Parser.rekex.Grammar.ConnectionView;
import org.JAutoLayout.Parser.rekex.Grammar.Connector;
import org.JAutoLayout.Parser.rekex.Grammar.ConnectorWrappedPredicateList;
import org.JAutoLayout.Parser.rekex.Grammar.Constant;
import org.JAutoLayout.Parser.rekex.Grammar.EmptyString;
import org.JAutoLayout.Parser.rekex.Grammar.ObjectOfPredicate;
import org.JAutoLayout.Parser.rekex.Grammar.Orientation;
import org.JAutoLayout.Parser.rekex.Grammar.Predicate;
import org.JAutoLayout.Parser.rekex.Grammar.PredicateList;
import org.JAutoLayout.Parser.rekex.Grammar.PredicateListWithParens;
import org.JAutoLayout.Parser.rekex.Grammar.Priority;
import org.JAutoLayout.Parser.rekex.Grammar.Relation;
import org.JAutoLayout.Parser.rekex.Grammar.SimplePredicate;
import org.JAutoLayout.Parser.rekex.Grammar.StrPriority;
import org.JAutoLayout.Parser.rekex.Grammar.SuperView;
import org.JAutoLayout.Parser.rekex.Grammar.SuperViewConnection;
import org.JAutoLayout.Parser.rekex.Grammar.View;
import org.JAutoLayout.Parser.rekex.Grammar.ViewName;
import org.JAutoLayout.Parser.rekex.Grammar.VisualFormatString;
import org.rekex.helper.datatype.Opt;
import org.rekex.helper.datatype.Opt.None;
import org.rekex.helper.datatype.Opt.Some;


// Generated recursive descent PEG parser by Rekex

// rootType: VisualFormatString

// !! this file is automatically generated; do not modify.
@SuppressWarnings({"all", "unchecked"})
public class Parser implements PegParser<VisualFormatString>
{
    static final int rootTypeRuleId = 0;

    final Object catalog;
    public Parser()
    {
        this.catalog = null;
    }

    @Override
    public ParseResult<VisualFormatString> parse(CharSequence chars, int start, int end)
    {
        _State state = new _State();
        state.catalog = this.catalog;
        state.chars = chars;
        state.start = start;
        state.end = end;
        state.inputInfo = new org.rekex.parser.InputInfo(chars, start, end);

        try
        {
            state = match(rootTypeRuleId, state, -1);
        }
        catch (_FatalEx fatalEx)
        {
            var stack = pathToStack(state.path, state.pathLen);
            return new ParseResult.Fatal<>(fatalEx.position, fatalEx.cause, stack);
        }

        if(!state.fail)
        {
            VisualFormatString obj = state.pickObj();
            if(state.start==state.end)
                return new ParseResult.Full<>(obj);
            else
                return new ParseResult.Partial<>(obj, state.start);
        }
        else
        {
            var stack = pathToStack(state.maxFailPath, state.maxFailPath.length);
            String msg = failMsg(state.maxFailReason, state.maxFailEx, _DatatypeList.list.get(state.maxFailRuleId));
            return new ParseResult.Fail<>(state.maxFailPos, msg, state.maxFailEx, stack);
        }
    }

    final static class _State implements Cloneable
    {
        Object catalog;
        CharSequence chars;
        int start;
        int end;

        org.rekex.parser.InputInfo inputInfo;

        boolean fail;
        // if fail==false, match is success, obj is set (null is allowed)
        Object obj;

        int[] path = new int[64];
        int pathLen = 0;

        int maxFailPos = -1;
        int[] maxFailPath;
        int maxFailReason;
        Exception maxFailEx;
        int maxFailRuleId;

        public _State clone()
        {
            try {
                return (_State)super.clone();
            } catch (CloneNotSupportedException e) {
                throw new AssertionError(e);
            }
        }

        int gStart, gEnd; // tmp data buffer for regex

        void pathPush(int ruleId, int subIndex)
        {
            if(pathLen+3 > path.length)
                path = java.util.Arrays.copyOf(path, path.length+64);
            path[pathLen++] = ruleId;
            path[pathLen++] = this.start;
            path[pathLen++] = subIndex;
        }
        void pathPop()
        {
            pathLen -= 3;
        }

        _State ok(Object obj)
        {
            this.fail = false;
            this.obj = obj;
            return this;
        }
        <T> T pickObj()
        {
            T t = (T)obj;
            obj = null;
            return t;
        }

        _State fail(int position, int reason, Exception ex, int ruleId, int startReset)
        {
            if(position>maxFailPos)
            {
                maxFailPos = position;
                maxFailPath = java.util.Arrays.copyOf(path, pathLen);
                maxFailReason = reason;
                maxFailEx = ex;
                maxFailRuleId = ruleId;
            }
            return fail(startReset);
        }
        _State fail(int startReset)
        {
            this.fail = true;
            this.obj = null;
            this.start = startReset;
            return this;
        }

    }
    static final int failReason_predicate = 0;   // info: Exception
    static final int failReason_neg = 1;         // info: subrule ID
    static final int failReason_regex = 2;
    static final int failReason_regex_group = 3;

    static String failMsg(int reason, Exception ex, org.rekex.annotype.AnnoType type)
    {
        String typeStr = type.toString(false);
        return switch (reason){
            case failReason_predicate
                -> ex.getMessage()!=null ? ex.getMessage() : ex.toString();
            case failReason_neg
                -> typeStr + " failed; input matched subrule";
            case failReason_regex
                -> "Input does not match regex: "+typeStr;
            case failReason_regex_group
                -> "Input does not match regex group: "+typeStr;
            default -> throw new AssertionError("unexpected reason: "+reason);
        };
    }

    static java.util.ArrayList<ParseResult.Node> pathToStack(int[] path, int pathLen)
    {
        java.util.ArrayList<ParseResult.Node> stack = new java.util.ArrayList<>(pathLen/2);
        for(int i=pathLen-1; i>=0;)
        {
            int _subIndex = path[i--];
            int _start = path[i--];
            int _ruleId = path[i--];
            var datatype = _DatatypeList.list.get(_ruleId);
            stack.add(new ParseResult.Node(datatype, _start, _subIndex));
        }
        return stack;
    }

    static class _FatalEx extends Exception
    {
        final int position;
        final Exception cause;
        _FatalEx(int position, Exception cause)
        {
            super(null, null, false, false);
            this.position = position;
            this.cause = cause;
        }
    }

    // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
    // rules
    // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

    static _State match(int ruleId, _State state, int subIndex) throws _FatalEx
    {
        state.pathPush(ruleId, subIndex);
        state = switch(ruleId){
            case 0 -> rule_0(state); // VisualFormatString
            case 1 -> rule_1(state); // Opt<Orientation>
            case 2 -> rule_2(state); // Opt<SuperViewConnection>
            case 3 -> rule_3(state); // View
            case 4 -> rule_4(state); // List<ConnectionView>
            case 5 -> rule_5(state); // Opt<ConnectionSuperView>
            case 6 -> rule_6(state); // Some<Orientation>
            case 7 -> rule_7(state); // None<Orientation>
            case 8 -> rule_8(state); // Some<SuperViewConnection>
            case 9 -> rule_9(state); // None<SuperViewConnection>
            case 10 -> rule_10(state); // @Ch("[")char
            case 11 -> rule_11(state); // ViewName
            case 12 -> rule_12(state); // Opt<PredicateListWithParens>
            case 13 -> rule_13(state); // @Ch("]")char
            case 14 -> rule_14(state); // ConnectionView
            case 15 -> rule_15(state); // Some<ConnectionSuperView>
            case 16 -> rule_16(state); // None<ConnectionSuperView>
            case 17 -> rule_17(state); // Orientation
            case 18 -> rule_18(state); // SuperViewConnection
            case 19 -> rule_19(state); // @Regex("[a-zA-Z_][a-zA-Z0-9_]*")String
            case 20 -> rule_20(state); // Some<PredicateListWithParens>
            case 21 -> rule_21(state); // None<PredicateListWithParens>
            case 22 -> rule_22(state); // Connection
            case 23 -> rule_23(state); // ConnectionSuperView
            case 24 -> rule_24(state); // @Str({"H","V"})String
            case 25 -> rule_25(state); // SuperView
            case 26 -> rule_26(state); // PredicateListWithParens
            case 27 -> rule_27(state); // ConnectorWrappedPredicateList
            case 28 -> rule_28(state); // Connector
            case 29 -> rule_29(state); // EmptyString
            case 30 -> rule_30(state); // @Ch("|")String
            case 31 -> rule_31(state); // @Ch("(")char
            case 32 -> rule_32(state); // Predicate
            case 33 -> rule_33(state); // List<CommaPredicate>
            case 34 -> rule_34(state); // @Ch(")")char
            case 35 -> rule_35(state); // PredicateList
            case 36 -> rule_36(state); // @Ch("-")char
            case 37 -> rule_37(state); // @Str("")String
            case 38 -> rule_38(state); // Opt<Relation>
            case 39 -> rule_39(state); // ObjectOfPredicate
            case 40 -> rule_40(state); // Opt<StrPriority>
            case 41 -> rule_41(state); // CommaPredicate
            case 42 -> rule_42(state); // SimplePredicate
            case 43 -> rule_43(state); // Some<Relation>
            case 44 -> rule_44(state); // None<Relation>
            case 45 -> rule_45(state); // Constant
            case 46 -> rule_46(state); // Some<StrPriority>
            case 47 -> rule_47(state); // None<StrPriority>
            case 48 -> rule_48(state); // @Ch(",")char
            case 49 -> rule_49(state); // Number
            case 50 -> rule_50(state); // Relation
            case 51 -> rule_51(state); // StrPriority
            case 52 -> rule_52(state); // Integer
            case 53 -> rule_53(state); // Double
            case 54 -> rule_54(state); // @Str({"==","<=",">="})String
            case 55 -> rule_55(state); // @Ch("@")char
            case 56 -> rule_56(state); // Priority
            case 57 -> rule_57(state); // @Regex("[0-9]+")String
            case 58 -> rule_58(state); // @Regex("[0-9]+\\.[0-9]+")String
            default -> throw new AssertionError("unknown ruleId: "+ruleId);
        };
        state.pathPop();
        return state;
    }

    // concat rule for: VisualFormatString
    static _State rule_0(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(1, state, 0); // arg_0: Opt<Orientation>
        if(state.fail)
            return state.fail(start0);
        Opt<Orientation> arg_0 = state.pickObj();

        state = match(2, state, 1); // arg_1: Opt<SuperViewConnection>
        if(state.fail)
            return state.fail(start0);
        Opt<SuperViewConnection> arg_1 = state.pickObj();

        state = match(3, state, 2); // arg_2: View
        if(state.fail)
            return state.fail(start0);
        View arg_2 = state.pickObj();

        state = match(4, state, 3); // arg_3: List<ConnectionView>
        if(state.fail)
            return state.fail(start0);
        List<ConnectionView> arg_3 = state.pickObj();

        state = match(5, state, 4); // arg_4: Opt<ConnectionSuperView>
        if(state.fail)
            return state.fail(start0);
        Opt<ConnectionSuperView> arg_4 = state.pickObj();

        VisualFormatString value;
        try{
            value = new VisualFormatString(arg_0, arg_1, arg_2, arg_3, arg_4);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // alt rule for: Opt<Orientation>
    static _State rule_1(_State state) throws _FatalEx
    {
        state = match(6, state, 0); // Some<Orientation>
        if(!state.fail)
            return state;

        state = match(7, state, 1); // None<Orientation>
        if(!state.fail)
            return state;

        return state;
    }


    // alt rule for: Opt<SuperViewConnection>
    static _State rule_2(_State state) throws _FatalEx
    {
        state = match(8, state, 0); // Some<SuperViewConnection>
        if(!state.fail)
            return state;

        state = match(9, state, 1); // None<SuperViewConnection>
        if(!state.fail)
            return state;

        return state;
    }


    // concat rule for: View
    static _State rule_3(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(10, state, 0); // arg_0: @Ch("[")char
        if(state.fail)
            return state.fail(start0);
        char arg_0 = state.pickObj();

        state = match(11, state, 1); // arg_1: ViewName
        if(state.fail)
            return state.fail(start0);
        ViewName arg_1 = state.pickObj();

        state = match(12, state, 2); // arg_2: Opt<PredicateListWithParens>
        if(state.fail)
            return state.fail(start0);
        Opt<PredicateListWithParens> arg_2 = state.pickObj();

        state = match(13, state, 3); // arg_3: @Ch("]")char
        if(state.fail)
            return state.fail(start0);
        char arg_3 = state.pickObj();

        View value;
        try{
            value = new View(arg_0, arg_1, arg_2, arg_3);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // repeat rule for: List<ConnectionView>
    static _State rule_4(_State state) throws _FatalEx
    {
        state = match_repeat(state, 4, 14, 0, Integer.MAX_VALUE);
        if(state.fail)
            return state;
        java.util.ArrayList<ConnectionView> list = state.pickObj();
        list.trimToSize();
        return state.ok(list);
    }

    // alt rule for: Opt<ConnectionSuperView>
    static _State rule_5(_State state) throws _FatalEx
    {
        state = match(15, state, 0); // Some<ConnectionSuperView>
        if(!state.fail)
            return state;

        state = match(16, state, 1); // None<ConnectionSuperView>
        if(!state.fail)
            return state;

        return state;
    }


    // concat rule for: Some<Orientation>
    static _State rule_6(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(17, state, 0); // arg_0: Orientation
        if(state.fail)
            return state.fail(start0);
        Orientation arg_0 = state.pickObj();

        Some<Orientation> value;
        try{
            value = new Some<Orientation>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: None<Orientation>
    static _State rule_7(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        None<Orientation> value;
        try{
            value = None.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Some<SuperViewConnection>
    static _State rule_8(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(18, state, 0); // arg_0: SuperViewConnection
        if(state.fail)
            return state.fail(start0);
        SuperViewConnection arg_0 = state.pickObj();

        Some<SuperViewConnection> value;
        try{
            value = new Some<SuperViewConnection>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: None<SuperViewConnection>
    static _State rule_9(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        None<SuperViewConnection> value;
        try{
            value = None.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Ch("[")char
    static _State rule_10(_State state) throws _FatalEx
    {
        return match_regex_char(state, 10, pattern_10, 0);
    }
    static final java.util.regex.Pattern pattern_10 = java.util.regex.Pattern.compile("\\[", 0);

    // concat rule for: ViewName
    static _State rule_11(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(19, state, 0); // arg_0: @Regex("[a-zA-Z_][a-zA-Z0-9_]*")String
        if(state.fail)
            return state.fail(start0);
        String arg_0 = state.pickObj();

        ViewName value;
        try{
            value = new ViewName(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // alt rule for: Opt<PredicateListWithParens>
    static _State rule_12(_State state) throws _FatalEx
    {
        state = match(20, state, 0); // Some<PredicateListWithParens>
        if(!state.fail)
            return state;

        state = match(21, state, 1); // None<PredicateListWithParens>
        if(!state.fail)
            return state;

        return state;
    }


    // regex rule for: @Ch("]")char
    static _State rule_13(_State state) throws _FatalEx
    {
        return match_regex_char(state, 13, pattern_13, 0);
    }
    static final java.util.regex.Pattern pattern_13 = java.util.regex.Pattern.compile("\\]", 0);

    // concat rule for: ConnectionView
    static _State rule_14(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(22, state, 0); // arg_0: Connection
        if(state.fail)
            return state.fail(start0);
        Connection arg_0 = state.pickObj();

        state = match(3, state, 1); // arg_1: View
        if(state.fail)
            return state.fail(start0);
        View arg_1 = state.pickObj();

        ConnectionView value;
        try{
            value = new ConnectionView(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Some<ConnectionSuperView>
    static _State rule_15(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(23, state, 0); // arg_0: ConnectionSuperView
        if(state.fail)
            return state.fail(start0);
        ConnectionSuperView arg_0 = state.pickObj();

        Some<ConnectionSuperView> value;
        try{
            value = new Some<ConnectionSuperView>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: None<ConnectionSuperView>
    static _State rule_16(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        None<ConnectionSuperView> value;
        try{
            value = None.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Orientation
    static _State rule_17(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(24, state, 0); // arg_0: @Str({"H","V"})String
        if(state.fail)
            return state.fail(start0);
        String arg_0 = state.pickObj();

        Orientation value;
        try{
            value = new Orientation(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: SuperViewConnection
    static _State rule_18(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(25, state, 0); // arg_0: SuperView
        if(state.fail)
            return state.fail(start0);
        SuperView arg_0 = state.pickObj();

        state = match(22, state, 1); // arg_1: Connection
        if(state.fail)
            return state.fail(start0);
        Connection arg_1 = state.pickObj();

        SuperViewConnection value;
        try{
            value = new SuperViewConnection(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Regex("[a-zA-Z_][a-zA-Z0-9_]*")String
    static _State rule_19(_State state)
    {
        return match_regex_str(state, 19, pattern_19, 0);
    }
    static final java.util.regex.Pattern pattern_19 = java.util.regex.Pattern.compile("[a-zA-Z_][a-zA-Z0-9_]*", 0);

    // concat rule for: Some<PredicateListWithParens>
    static _State rule_20(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(26, state, 0); // arg_0: PredicateListWithParens
        if(state.fail)
            return state.fail(start0);
        PredicateListWithParens arg_0 = state.pickObj();

        Some<PredicateListWithParens> value;
        try{
            value = new Some<PredicateListWithParens>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: None<PredicateListWithParens>
    static _State rule_21(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        None<PredicateListWithParens> value;
        try{
            value = None.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // alt rule for: Connection
    static _State rule_22(_State state) throws _FatalEx
    {
        state = match(27, state, 0); // ConnectorWrappedPredicateList
        if(!state.fail)
            return state;

        state = match(28, state, 1); // Connector
        if(!state.fail)
            return state;

        state = match(29, state, 2); // EmptyString
        if(!state.fail)
            return state;

        return state;
    }


    // concat rule for: ConnectionSuperView
    static _State rule_23(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(22, state, 0); // arg_0: Connection
        if(state.fail)
            return state.fail(start0);
        Connection arg_0 = state.pickObj();

        state = match(25, state, 1); // arg_1: SuperView
        if(state.fail)
            return state.fail(start0);
        SuperView arg_1 = state.pickObj();

        ConnectionSuperView value;
        try{
            value = new ConnectionSuperView(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Str({"H","V"})String
    static _State rule_24(_State state)
    {
        return match_regex_str(state, 24, pattern_24, 0);
    }
    static final java.util.regex.Pattern pattern_24 = java.util.regex.Pattern.compile("H|V", 0);

    // concat rule for: SuperView
    static _State rule_25(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(30, state, 0); // arg_0: @Ch("|")String
        if(state.fail)
            return state.fail(start0);
        String arg_0 = state.pickObj();

        SuperView value;
        try{
            value = new SuperView(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: PredicateListWithParens
    static _State rule_26(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(31, state, 0); // arg_0: @Ch("(")char
        if(state.fail)
            return state.fail(start0);
        char arg_0 = state.pickObj();

        state = match(32, state, 1); // arg_1: Predicate
        if(state.fail)
            return state.fail(start0);
        Predicate arg_1 = state.pickObj();

        state = match(33, state, 2); // arg_2: List<CommaPredicate>
        if(state.fail)
            return state.fail(start0);
        List<CommaPredicate> arg_2 = state.pickObj();

        state = match(34, state, 3); // arg_3: @Ch(")")char
        if(state.fail)
            return state.fail(start0);
        char arg_3 = state.pickObj();

        PredicateListWithParens value;
        try{
            value = new PredicateListWithParens(arg_0, arg_1, arg_2, arg_3);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: ConnectorWrappedPredicateList
    static _State rule_27(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(28, state, 0); // arg_0: Connector
        if(state.fail)
            return state.fail(start0);
        Connector arg_0 = state.pickObj();

        state = match(35, state, 1); // arg_1: PredicateList
        if(state.fail)
            return state.fail(start0);
        PredicateList arg_1 = state.pickObj();

        state = match(28, state, 2); // arg_2: Connector
        if(state.fail)
            return state.fail(start0);
        Connector arg_2 = state.pickObj();

        ConnectorWrappedPredicateList value;
        try{
            value = new ConnectorWrappedPredicateList(arg_0, arg_1, arg_2);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Connector
    static _State rule_28(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(36, state, 0); // arg_0: @Ch("-")char
        if(state.fail)
            return state.fail(start0);
        char arg_0 = state.pickObj();

        Connector value;
        try{
            value = new Connector(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: EmptyString
    static _State rule_29(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(37, state, 0); // arg_0: @Str("")String
        if(state.fail)
            return state.fail(start0);
        String arg_0 = state.pickObj();

        EmptyString value;
        try{
            value = new EmptyString(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Ch("|")String
    static _State rule_30(_State state)
    {
        return match_regex_str(state, 30, pattern_30, 0);
    }
    static final java.util.regex.Pattern pattern_30 = java.util.regex.Pattern.compile("\\|", 0);

    // regex rule for: @Ch("(")char
    static _State rule_31(_State state) throws _FatalEx
    {
        return match_regex_char(state, 31, pattern_31, 0);
    }
    static final java.util.regex.Pattern pattern_31 = java.util.regex.Pattern.compile("\\(", 0);

    // concat rule for: Predicate
    static _State rule_32(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(38, state, 0); // arg_0: Opt<Relation>
        if(state.fail)
            return state.fail(start0);
        Opt<Relation> arg_0 = state.pickObj();

        state = match(39, state, 1); // arg_1: ObjectOfPredicate
        if(state.fail)
            return state.fail(start0);
        ObjectOfPredicate arg_1 = state.pickObj();

        state = match(40, state, 2); // arg_2: Opt<StrPriority>
        if(state.fail)
            return state.fail(start0);
        Opt<StrPriority> arg_2 = state.pickObj();

        Predicate value;
        try{
            value = new Predicate(arg_0, arg_1, arg_2);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // repeat rule for: List<CommaPredicate>
    static _State rule_33(_State state) throws _FatalEx
    {
        state = match_repeat(state, 33, 41, 0, Integer.MAX_VALUE);
        if(state.fail)
            return state;
        java.util.ArrayList<CommaPredicate> list = state.pickObj();
        list.trimToSize();
        return state.ok(list);
    }

    // regex rule for: @Ch(")")char
    static _State rule_34(_State state) throws _FatalEx
    {
        return match_regex_char(state, 34, pattern_34, 0);
    }
    static final java.util.regex.Pattern pattern_34 = java.util.regex.Pattern.compile("\\)", 0);

    // alt rule for: PredicateList
    static _State rule_35(_State state) throws _FatalEx
    {
        state = match(42, state, 0); // SimplePredicate
        if(!state.fail)
            return state;

        state = match(26, state, 1); // PredicateListWithParens
        if(!state.fail)
            return state;

        return state;
    }


    // regex rule for: @Ch("-")char
    static _State rule_36(_State state) throws _FatalEx
    {
        return match_regex_char(state, 36, pattern_36, 0);
    }
    static final java.util.regex.Pattern pattern_36 = java.util.regex.Pattern.compile("\\-", 0);

    // regex rule for: @Str("")String
    static _State rule_37(_State state)
    {
        return match_regex_str(state, 37, pattern_37, 0);
    }
    static final java.util.regex.Pattern pattern_37 = java.util.regex.Pattern.compile("", 0);

    // alt rule for: Opt<Relation>
    static _State rule_38(_State state) throws _FatalEx
    {
        state = match(43, state, 0); // Some<Relation>
        if(!state.fail)
            return state;

        state = match(44, state, 1); // None<Relation>
        if(!state.fail)
            return state;

        return state;
    }


    // alt rule for: ObjectOfPredicate
    static _State rule_39(_State state) throws _FatalEx
    {
        state = match(45, state, 0); // Constant
        if(!state.fail)
            return state;

        state = match(11, state, 1); // ViewName
        if(!state.fail)
            return state;

        return state;
    }


    // alt rule for: Opt<StrPriority>
    static _State rule_40(_State state) throws _FatalEx
    {
        state = match(46, state, 0); // Some<StrPriority>
        if(!state.fail)
            return state;

        state = match(47, state, 1); // None<StrPriority>
        if(!state.fail)
            return state;

        return state;
    }


    // concat rule for: CommaPredicate
    static _State rule_41(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(48, state, 0); // arg_0: @Ch(",")char
        if(state.fail)
            return state.fail(start0);
        char arg_0 = state.pickObj();

        state = match(32, state, 1); // arg_1: Predicate
        if(state.fail)
            return state.fail(start0);
        Predicate arg_1 = state.pickObj();

        CommaPredicate value;
        try{
            value = new CommaPredicate(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: SimplePredicate
    static _State rule_42(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(49, state, 0); // arg_0: Number
        if(state.fail)
            return state.fail(start0);
        Grammar.Number arg_0 = state.pickObj();

        SimplePredicate value;
        try{
            value = new SimplePredicate(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Some<Relation>
    static _State rule_43(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(50, state, 0); // arg_0: Relation
        if(state.fail)
            return state.fail(start0);
        Relation arg_0 = state.pickObj();

        Some<Relation> value;
        try{
            value = new Some<Relation>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: None<Relation>
    static _State rule_44(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        None<Relation> value;
        try{
            value = None.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Constant
    static _State rule_45(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(49, state, 0); // arg_0: Number
        if(state.fail)
            return state.fail(start0);
        Grammar.Number arg_0 = state.pickObj();

        Constant value;
        try{
            value = new Constant(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Some<StrPriority>
    static _State rule_46(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(51, state, 0); // arg_0: StrPriority
        if(state.fail)
            return state.fail(start0);
        StrPriority arg_0 = state.pickObj();

        Some<StrPriority> value;
        try{
            value = new Some<StrPriority>(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: None<StrPriority>
    static _State rule_47(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        None<StrPriority> value;
        try{
            value = None.ctor();
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Ch(",")char
    static _State rule_48(_State state) throws _FatalEx
    {
        return match_regex_char(state, 48, pattern_48, 0);
    }
    static final java.util.regex.Pattern pattern_48 = java.util.regex.Pattern.compile(",", 0);

    // alt rule for: Number
    static _State rule_49(_State state) throws _FatalEx
    {
        state = match(52, state, 0); // Integer
        if(!state.fail)
            return state;

        state = match(53, state, 1); // Double
        if(!state.fail)
            return state;

        return state;
    }


    // concat rule for: Relation
    static _State rule_50(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(54, state, 0); // arg_0: @Str({"==","<=",">="})String
        if(state.fail)
            return state.fail(start0);
        String arg_0 = state.pickObj();

        Relation value;
        try{
            value = new Relation(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: StrPriority
    static _State rule_51(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(55, state, 0); // arg_0: @Ch("@")char
        if(state.fail)
            return state.fail(start0);
        char arg_0 = state.pickObj();

        state = match(56, state, 1); // arg_1: Priority
        if(state.fail)
            return state.fail(start0);
        Priority arg_1 = state.pickObj();

        StrPriority value;
        try{
            value = new StrPriority(arg_0, arg_1);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Integer
    static _State rule_52(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(57, state, 0); // arg_0: @Regex("[0-9]+")String
        if(state.fail)
            return state.fail(start0);
        String arg_0 = state.pickObj();

        Grammar.Integer value;
        try{
            value = new Grammar.Integer(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // concat rule for: Double
    static _State rule_53(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(58, state, 0); // arg_0: @Regex("[0-9]+\\.[0-9]+")String
        if(state.fail)
            return state.fail(start0);
        String arg_0 = state.pickObj();

        Grammar.Double value;
        try{
            value = new Grammar.Double(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Str({"==","<=",">="})String
    static _State rule_54(_State state)
    {
        return match_regex_str(state, 54, pattern_54, 0);
    }
    static final java.util.regex.Pattern pattern_54 = java.util.regex.Pattern.compile("==|<=|>=", 0);

    // regex rule for: @Ch("@")char
    static _State rule_55(_State state) throws _FatalEx
    {
        return match_regex_char(state, 55, pattern_55, 0);
    }
    static final java.util.regex.Pattern pattern_55 = java.util.regex.Pattern.compile("@", 0);

    // concat rule for: Priority
    static _State rule_56(_State state) throws _FatalEx
    {
        final int start0 = state.start;

        state = match(57, state, 0); // arg_0: @Regex("[0-9]+")String
        if(state.fail)
            return state.fail(start0);
        String arg_0 = state.pickObj();

        Priority value;
        try{
            value = new Priority(arg_0);
        }catch(Exception ex){
            throw new _FatalEx(start0, ex);
        }
        return state.ok(value);
    }

    // regex rule for: @Regex("[0-9]+")String
    static _State rule_57(_State state)
    {
        return match_regex_str(state, 57, pattern_57, 0);
    }
    static final java.util.regex.Pattern pattern_57 = java.util.regex.Pattern.compile("[0-9]+", 0);

    // regex rule for: @Regex("[0-9]+\\.[0-9]+")String
    static _State rule_58(_State state)
    {
        return match_regex_str(state, 58, pattern_58, 0);
    }
    static final java.util.regex.Pattern pattern_58 = java.util.regex.Pattern.compile("[0-9]+\\.[0-9]+", 0);



    // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
    //
    // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

    static _State match_repeat(_State state, int ruleId, int subRuleId, int min, int max) throws _FatalEx
    {
        final int start0 = state.start;
        java.util.ArrayList<Object> list = new java.util.ArrayList<>(Math.max(min, Math.min(10, max)));
        for(int i=0; i<max; i++)
        {
            final int start1 = state.start;
            state = match(subRuleId, state, i);
            if(i<min && state.fail)
                return state.fail(start0);
            if(i>=min && state.fail) // enough elements
                break;
            if(i>=min && start1==state.start) // no progress, enough elements
                break;
            list.add(state.pickObj());
        }
        return state.ok(list);
    }

    static _State match_regex(_State state, int ruleId, java.util.regex.Pattern pattern, int group)
    {
        var matcher = pattern.matcher(state.chars);
        matcher.region(state.start, state.end);
        boolean matched = matcher.lookingAt();
        if(!matched)
            return state.fail(state.start, failReason_regex, null, ruleId, state.start);

        state.gStart = matcher.start(group);
        state.gEnd = matcher.end(group);
        if(state.gStart==-1)
            return state.fail(state.start, failReason_regex_group, null, ruleId, state.start);

        state.start = matcher.end(0); // consume group 0
        return state.ok(null);
    }
    static _State match_regex_char(_State state, int ruleId, java.util.regex.Pattern pattern, int group) throws _FatalEx
    {
        state = match_regex_int(state, ruleId, pattern, group);
        if(state.fail)
            return state;
        Integer x = state.pickObj();
        if(x>0xFFFF)
        {
            // programming mistake in the regex, or an unexpected input
            String msg = "expected to match exactly 1 char; matched=%s, start=%s, end=%s, regex=%s"
                .formatted(Integer.toHexString(x), state.gStart, state.gEnd, pattern.pattern());
            throw new _FatalEx(state.gStart, new Exception(msg));
        }
        return state.ok(Character.valueOf((char)x.intValue()));
    }
    static _State match_regex_int(_State state, int ruleId, java.util.regex.Pattern pattern, int group) throws _FatalEx
    {
        state = match_regex(state, ruleId, pattern, group);
        if(state.fail)
            return state;
        int count = Character.codePointCount(state.chars, state.gStart, state.gEnd);
        if(count==1)
        {
            int code = Character.codePointAt(state.chars, state.gStart);
            if(Character.charCount(code)==state.gEnd-state.gStart) // could it fail?
                return state.ok(code);
        }
        // programming mistake in the regex, or an unexpected input
        String msg = "expected to match exactly 1 code point; start=%s, end=%s, regex=%s"
            .formatted(state.gStart, state.gEnd, pattern.pattern());
        throw new _FatalEx(state.gStart, new Exception(msg));
    }
    static _State match_regex_str(_State state, int ruleId, java.util.regex.Pattern pattern, int group)
    {
        state = match_regex(state, ruleId, pattern, group);
        if(state.fail)
            return state;
        String str = state.chars.subSequence(state.gStart, state.gEnd).toString();
        return state.ok(str);
    }
    static class _DatatypeList
    {
        // [0] VisualFormatString
        static Grammar.VisualFormatString t_0;
        // [1] Opt<Orientation>
        static org.rekex.helper.datatype.Opt<Grammar.Orientation> t_1;
        // [2] Opt<SuperViewConnection>
        static org.rekex.helper.datatype.Opt<Grammar.SuperViewConnection> t_2;
        // [3] View
        static Grammar.View t_3;
        // [4] List<ConnectionView>
        static java.util.List<Grammar.ConnectionView> t_4;
        // [5] Opt<ConnectionSuperView>
        static org.rekex.helper.datatype.Opt<Grammar.ConnectionSuperView> t_5;
        // [6] Some<Orientation>
        static org.rekex.helper.datatype.Opt.Some<Grammar.Orientation> t_6;
        // [7] None<Orientation>
        static org.rekex.helper.datatype.Opt.None<Grammar.Orientation> t_7;
        // [8] Some<SuperViewConnection>
        static org.rekex.helper.datatype.Opt.Some<Grammar.SuperViewConnection> t_8;
        // [9] None<SuperViewConnection>
        static org.rekex.helper.datatype.Opt.None<Grammar.SuperViewConnection> t_9;
        // [10] @Ch("[")char
        static @org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="[")char t_10;
        // [11] ViewName
        static Grammar.ViewName t_11;
        // [12] Opt<PredicateListWithParens>
        static org.rekex.helper.datatype.Opt<Grammar.PredicateListWithParens> t_12;
        // [13] @Ch("]")char
        static @org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="]")char t_13;
        // [14] ConnectionView
        static Grammar.ConnectionView t_14;
        // [15] Some<ConnectionSuperView>
        static org.rekex.helper.datatype.Opt.Some<Grammar.ConnectionSuperView> t_15;
        // [16] None<ConnectionSuperView>
        static org.rekex.helper.datatype.Opt.None<Grammar.ConnectionSuperView> t_16;
        // [17] Orientation
        static Grammar.Orientation t_17;
        // [18] SuperViewConnection
        static Grammar.SuperViewConnection t_18;
        // [19] @Regex("[a-zA-Z_][a-zA-Z0-9_]*")String
        static java.lang.@org.rekex.spec.Regex(flags=0, group=0, value="[a-zA-Z_][a-zA-Z0-9_]*")String t_19;
        // [20] Some<PredicateListWithParens>
        static org.rekex.helper.datatype.Opt.Some<Grammar.PredicateListWithParens> t_20;
        // [21] None<PredicateListWithParens>
        static org.rekex.helper.datatype.Opt.None<Grammar.PredicateListWithParens> t_21;
        // [22] Connection
        static Grammar.Connection t_22;
        // [23] ConnectionSuperView
        static Grammar.ConnectionSuperView t_23;
        // [24] @Str({"H","V"})String
        static java.lang.@org.rekex.helper.anno.Str(ignoreCase=false, value={"H", "V"})String t_24;
        // [25] SuperView
        static Grammar.SuperView t_25;
        // [26] PredicateListWithParens
        static Grammar.PredicateListWithParens t_26;
        // [27] ConnectorWrappedPredicateList
        static Grammar.ConnectorWrappedPredicateList t_27;
        // [28] Connector
        static Grammar.Connector t_28;
        // [29] EmptyString
        static Grammar.EmptyString t_29;
        // [30] @Ch("|")String
        static java.lang.@org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="|")String t_30;
        // [31] @Ch("(")char
        static @org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="(")char t_31;
        // [32] Predicate
        static Grammar.Predicate t_32;
        // [33] List<CommaPredicate>
        static java.util.List<Grammar.CommaPredicate> t_33;
        // [34] @Ch(")")char
        static @org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value=")")char t_34;
        // [35] PredicateList
        static Grammar.PredicateList t_35;
        // [36] @Ch("-")char
        static @org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="-")char t_36;
        // [37] @Str("")String
        static java.lang.@org.rekex.helper.anno.Str(ignoreCase=false, value={""})String t_37;
        // [38] Opt<Relation>
        static org.rekex.helper.datatype.Opt<Grammar.Relation> t_38;
        // [39] ObjectOfPredicate
        static Grammar.ObjectOfPredicate t_39;
        // [40] Opt<StrPriority>
        static org.rekex.helper.datatype.Opt<Grammar.StrPriority> t_40;
        // [41] CommaPredicate
        static Grammar.CommaPredicate t_41;
        // [42] SimplePredicate
        static Grammar.SimplePredicate t_42;
        // [43] Some<Relation>
        static org.rekex.helper.datatype.Opt.Some<Grammar.Relation> t_43;
        // [44] None<Relation>
        static org.rekex.helper.datatype.Opt.None<Grammar.Relation> t_44;
        // [45] Constant
        static Grammar.Constant t_45;
        // [46] Some<StrPriority>
        static org.rekex.helper.datatype.Opt.Some<Grammar.StrPriority> t_46;
        // [47] None<StrPriority>
        static org.rekex.helper.datatype.Opt.None<Grammar.StrPriority> t_47;
        // [48] @Ch(",")char
        static @org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value=",")char t_48;
        // [49] Number
        static Grammar.Number t_49;
        // [50] Relation
        static Grammar.Relation t_50;
        // [51] StrPriority
        static Grammar.StrPriority t_51;
        // [52] Integer
        static Grammar.Integer t_52;
        // [53] Double
        static Grammar.Double t_53;
        // [54] @Str({"==","<=",">="})String
        static java.lang.@org.rekex.helper.anno.Str(ignoreCase=false, value={"==", "<=", ">="})String t_54;
        // [55] @Ch("@")char
        static @org.rekex.helper.anno.Ch(except="", ignoreCase=false, range={}, value="@")char t_55;
        // [56] Priority
        static Grammar.Priority t_56;
        // [57] @Regex("[0-9]+")String
        static java.lang.@org.rekex.spec.Regex(flags=0, group=0, value="[0-9]+")String t_57;
        // [58] @Regex("[0-9]+\\.[0-9]+")String
        static java.lang.@org.rekex.spec.Regex(flags=0, group=0, value="[0-9]+\\.[0-9]+")String t_58;

        static final java.util.ArrayList<org.rekex.annotype.AnnoType> list = new java.util.ArrayList<>();
        static
        {
            for(int id=0; id<59; id++)
            {
                java.lang.reflect.Field field;
                try{ field = _DatatypeList.class.getDeclaredField("t_"+id); }
                catch(Exception ex){ ex.printStackTrace(); throw new Error(ex); }
                var type = org.rekex.annotype.TypeMath.convertFromJlr(field.getAnnotatedType());
                list.add(type);
            }
        }
    }

}
